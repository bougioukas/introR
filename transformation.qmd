# Data transformation {#sec-transformation}

```{r}
#| include: false

library(dplyr)
library(here)
```

When we have finished this chapter, we should be able to:

::: {.callout-caution icon="false"}
## Learning objectives

-   Import the data from spreadsheets in R.
-   Select rows in a data frame according to filtering conditions.
-   Select columns in a data frame.
-   Direct the output of one dplyr function to the input of another function with the "pipe" operator `%>%`.
-   Add new columns to a data frame that are functions of existing columns with `mutate()`.
-   Use `summarize()` with `across()` to calculate summary statistics for multiple variables, and `group_by()` to split a data frame into groups of observations, apply summary statistics for each group, and then combine the results.
:::

 

## Importing data

Up to this point we have used data objects created with functions. Most of the time however, we work with data stored elsewhere and there are many ways to import such data into an R session.

Data are stored in spreadsheets which are often saved in one of the following two formats:

1.  A *Comma Separated Values* `.csv` file. We can think of a `.csv` file as a barebones spreadsheet where:

-   Each line in the file corresponds to one row of data/one observation.
-   Values for each line are separated with commas ",". In other words, the values of different variables are separated by commas.
-   The first line is often, but not always, a *header* row indicating the names of the columns/variables.

2.  An Excel `.xlsx` spreadsheet file. This format is based on Microsoft's proprietary Excel software and may include the use of bold and italic fonts, colored cells, different column widths, and formula macros.

We will use the dataset named `arrhythmia` which is a `.csv` file.

```{r}
#| echo: false
#| message: false
#| label: fig-arrhythmia
#| fig-cap: Table with raw data of arrhythmia data set.

library(readr)
arrhythmia <- read_csv(here("data", "arrhythmia.csv"))

DT::datatable(arrhythmia, extensions = 'Scroller', 
              options = list(deferRender = F, dom = 't', columnDefs = list(list(className = 'dt-center', targets = 1:6)), scrollY = 452, scroller = TRUE, scrollX = T, pageLength = 10))

```

The meta-data (data about the data) for this dataset are as following:

1.  age: age (yrs)
2.  sex: sex (0=male, 1=female)
3.  height: height (cm)
4.  weight: weight (kg)
5.  QRS: mean duration of QRS (ms) ![](images/QRS_normal.png){width="88" height="68"}
6.  heart_rate: heart rate (beats/min)

If the dataset is stored in our computer disc as a `.csv` file (`arrhythmia.csv`) we can read it with the `read_csv` function from `{readr}` package as following:

```{r}
#| message: false

library(readr)
arrhythmia <- read_csv(here("data", "arrhythmia.csv"))

arrhythmia
```

This data frame contains `r nrow(arrhythmia)` observations and `r ncol(arrhythmia)` variables. However, when we call the name of the object (arrhythmia), we can see in the console the first 10 rows, and all the columns that fit on screen. Note that by default the first row of the `.csv` file was used as the column names of the data frame.

We might have noticed that the categorical variable `sex` is coded as 0 (for males) and 1 (for females), so it is recognized of `double` type. We can use the `factor()` function to encode a variable as a factor:

```{r}
arrhythmia$sex = factor(arrhythmia$sex, levels = c(0, 1), labels = c("male", "female"))
```

Let's look at the data again with the `glipmse()` function:

```{r}
glimpse(arrhythmia)
```

Now, the variable `sex` is a factor variable (`fct`) with two levels:

```{r}
levels(arrhythmia$sex)
```

 

## Subsetting variables

We don't necessarily need all the variables, and a good practice for large datasets with many variables is to select only the variables we are actually interested in. In this chapter we review the different ways of selecting variables.

Variable selection is not very useful with the `arrhythmia` data because we only have `r ncol(arrhythmia)` variables, but we can still get the general idea.

**A. Select variables by name using `[ ]`**

We can select only the `age`, `sex`, `QRS`, variables from the data frame:

```{r}
dat1 <- arrhythmia[c("age", "sex" , "QRS")]
head(dat1)
```

**B. Select or exclude variables by indexing `[ ]`** (not recommended)

```{r}
dat2 <- arrhythmia[c(1, 2, 5)]
head(dat2)
```

```{r}
dat3 <- arrhythmia[-c(3, 4, 6)]
head(dat3)
```

**C. Select variables using the `subset()` function**

```{r}
dat4 <- subset(arrhythmia, select = c(1, 2, 5))
head(dat4)
```

The `select` argument allows the selection by indexing the columns of interest in.

**D. Select variables using the `select()` function from `dplyr`**

In `select()` function we pass the data frame first and then the variables separated by commas:

```{r}
dat5 <- select(arrhythmia, age, sex, QRS)
head(dat5)
```

 

## Subsetting observations

**A. Select rows by indexing `[ ]`**

```{r}
dat6 <- arrhythmia[5:15, ]
dat6
```

**B. Select rows by conditions using `[ ]`**

```{r}
dat7 <- arrhythmia[which(arrhythmia$age > 75), ]
dat7
```

```{r}
dat8 <- arrhythmia[which(arrhythmia$age > 75 & arrhythmia$sex == "female"), ]
dat8
```

**C. Select rows by conditions using `subset()` function**

```{r}
dat9 <- subset(arrhythmia, age > 75)
dat9
```

```{r}
dat10 <- subset(arrhythmia, age > 75 & sex == "female")
dat10
```

**D. Select rows using the `filter()` from `dplyr`**

We pass the data frame first and then one or more conditions separated by a comma:

```{r}
dat11 <- filter(arrhythmia, age > 75)
dat11
```

If we want to select only female patients with age \> 75:

```{r}
dat12 <- filter(arrhythmia, age > 75, sex == "female")
dat12
```

 

## Subsetting variables and observations by indexing `[ ]`

```{r}
dat13 <- arrhythmia[5:15, c(1, 2, 5)]
dat13
```

 

## Reorder rows using `arrange()` from `dplyr`

We can also arrange a data frame based on one or more variables. The `arrange()` function works similarly to `filter()` except that instead of selecting rows, it changes their order. It takes a data frame and a set of column names (or more complicated expressions) to order by. For example, we can arrange the rows of the `arrhythmia` table by the magnitude of `QRS` (in ascending order which is the default):

```{r}
dat14 <- arrange(arrhythmia, QRS)
head(dat14, 10)
```

We can use `desc()` to re-arrange in descending order. For example:

```{r}
dat15 <- arrange(arrhythmia, desc(QRS))
head(dat15, 10)
```

 

## Create new variables with `mutate()`

Suppose we want to calculate BMI for the participants from weight and height. We can use the following code to calculate the BMI (we divide the height with 100, because it was given in cm):

```{r, R.options = list(width = 200)}
mutate(arrhythmia, bmi = round(weight / (height / 100)^ 2, digits = 1))

```

which is equivalent to:

```{r, eval=FALSE}
arrhythmia %>%   
     mutate(bmi = round(weight / (height / 100)^ 2, digits=1))
```

 

## Using the pipe operator %\>% in a sequence of functions

Let's say that we want to find the BMI, and BMI categories only for the adults:

```{r, R.options = list(width = 300)}
arrhythmia_adults <- arrhythmia %>% 
        filter(age >= 18) %>% 
        mutate(bmi = round(weight / (height / 100)^ 2, digits = 1),
               bmi_cat = cut(bmi, breaks = c(-Inf, 18.5, 25.0, 30.0, Inf), 
                   labels = c("underweight","normal","overweight", "obese"))
               )

arrhythmia_adults
```

We would read this sequence as:

1.  Take the dataset `arrythmia` *then*
2.  Use this output as the input to the `filter()` to select only the adults (age \>=18) *then*
3.  Use this output as the input to the `mutate()` to calculate `bmi` and `bmi_cat`.

Can you imagine what is the function of `cut()` for?

 

## More examples and functions

Now, we want from the `arrhythmia_adults` to filter only the `overweight` or `obese` patients:

```{r, R.options = list(width = 300)}
overweight_obese <- arrhythmia_adults %>% 
                       filter(bmi_cat == "overweight" | bmi_cat == "obese")
```

Here, we used the logical operator `|`. The logical operators are:

-   `&` (and)
-   `|` (or)
-   `!` (not)

 

Alternatively we can use the `%in%` operator. This operator helps us to easily create multiple `OR` arguments:

```{r, R.options = list(width = 300)}
overweight_obese2 <- arrhythmia_adults %>% 
                       filter(bmi_cat %in% c("overweight", "obese"))
```

Let's say that we also want those overweight or obese people who have heart rate \> 85:

```{r, R.options = list(width = 300)}
overweight_obese3 <- arrhythmia_adults %>% 
                       filter(bmi_cat %in% c("overweight", "obese"), 
                              heart_rate >= 85)
overweight_obese3
```

Now, let's rename variables for example `heart_rate` to `HR` and `sex` to `gender` in the subset `overweight_obese3`. Moreover, `select()` can be used with `everything()` to hoist a variable up to the front of the tibble:

```{r, R.options = list(width = 300)}
overweight_obese3 %>% 
          rename(HR = heart_rate, gender = sex) %>% 
          select(HR, gender, everything())
                                   
```




## Explore for outliers in the dataset

Let’s take a look to the dataset *arrythmia_adults* with the `summary()` function:


```{r}
summary(arrhythmia_adults)
```

We can see that the minimum value in weight and bmi is `r min(arrhythmia_adults$weight)` kg and `r min(arrhythmia_adults$bmi)`, respectevely. However, these values can’t be right! We can also inspect the outliers in bmi variable using a simple boxplot @fig-boxplot_age:


```{r}
#| message: false
#| label: fig-boxplot_age
#| fig-cap: A Boxplot of age of adult patients.

boxplot(arrhythmia_adults$bmi, main = "Boxplot of age of adult patients", ylab = "BMI", boxwex=.3, frame = FALSE, col= "blue")
```



## Summarizing Numerical variables


### Summary measures for one numerical variable

The next common task when working with data frames is to compute **summary measures**. Summary measures are **single numerical values** that summarize a large number of values.  
Commonly known examples of summary measures for numerical data include the **arithmetic mean** (also called the average) and the **median** (the middle value). Other examples of summary measures that might not immediately come to mind include the **sum**, the smallest value also called the **minimum**, the largest value also called the **maximum**, the **1st quartile** and **3rd quartile**, the **standard deviation**, the **skewness**, and the **kurtosis**.  


Summary functions in R take in many values and return a single value, as illustrated in Figure @fig-summary. 

![Diagram illustrating a summary function in R](images/summary.png){#fig-summary width="75%"}




Let's calculate two summary measures for the `QRS` variable in the `arrhythmia_adults` data frame: the mean and standard deviation. To compute these summary measures, we need the `mean()` and `sd()` *statistical functions* in R. 

```{r}
mean(arrhythmia_adults$QRS, na.rm = TRUE)
sd(arrhythmia_adults$QRS, na.rm = TRUE)

```


:::{.callout-tip}
## `na.rm` argument

The `na.rm` argument of `mean()` and `sd()` statistical functions takes a logical value (`TRUE`/ `FALSE`) indicating whether `NA` values should be stripped before the computation proceeds.

:::

 

Now, we'll use the `mean()` and `sd()` within the **`summarize()`** function from the `{dplyr}` package. Note we can also use the UK spelling of `summarise()`. The first argument should be a data frame with the raw data:

```{r}

summary_QRS <- arrhythmia_adults %>% 
  summarize(mean_QRS = mean(QRS, na.rm = TRUE), 
            sd_QRS = sd(QRS, na.rm = TRUE))
summary_QRS
```

The results are saved in a new data frame `tibble` that has two columns/variables, the `mean_QRS` and the `sd_QRS`.


Other summary functions that can be used inside the `summarize()` verb to compute summary measures are:

* `mean()`: the mean AKA the average
* `sd()`: the standard deviation, which is a measure of spread
* `min()` and `max()`: the minimum and maximum values respectively
* `IQR()`: Interquartile range
* `sum()`: the sum
* `skewness()` : the skewness
* `kurtosis()` : the kurtosis
* `n()`: a count of the number of rows/observations in each group. This particular summary function will make more sense when `group_by()`.



### Summary measures for more numerical variables

We can add more numerical variables:

```{r}

summary_QRS_age <- arrhythmia_adults %>% 
                   summarize(mean_QRS = mean(QRS, na.rm = TRUE), 
                             sd_QRS = sd(QRS, na.rm = TRUE),
                             mean_age = mean(age, na.rm = TRUE), 
                             sd_age = sd(age, na.rm = TRUE)
                             )
summary_QRS_age
```

 

We can also calculate the mean for all numerical variables with the `summarize_if()`:
```{r}
summary_all_means <- arrhythmia_adults %>% 
  summarise_if(is.numeric, mean, na.rm = TRUE)
        
summary_all_means
```

 

### Grouping rows by a categorical variable and `summarize()`

Say instead of a single mean of QRS for all the adults, we want the mean QRS for the participants in each bmi category, separately. In other words, we would like to compute the mean `QRS` split by `bmi_cat`:

```{r}
summary_QRS_bmi <- arrhythmia_adults %>% 
  group_by(bmi_cat) %>% 
  summarize(mean_QRS = mean(QRS, na.rm = TRUE), 
            sd_QRS = sd(QRS, na.rm = TRUE)) %>% 
  ungroup() # ungrouping variable is a good habit to prevent errors

summary_QRS_bmi 
```


This code is identical to the previous code that created `summary_QRS`, but with an extra function `group_by()` added before the `summarize()`. Grouping the `arrhythmia_adults` dataset by `bmi_cat` and then applying the `summarize()` function yields a data frame that displays the mean and standard deviation QRS split by bmi categories.



:::{.callout-tip}
## `group_by()` function

It is important to note that the `group_by()` function doesn't change data frames by itself. Rather it changes the grouping structure. It is only after we apply the `summarize()` function that the data frame changes.

:::



### Grouping by more than one variable

We are not limited to grouping by one variable. Say we want to know the mean QRS of males and females in each of the four bmi categories:

```{r}
#| message: false

QRS_bmi_sex <- arrhythmia_adults %>% 
  group_by(bmi_cat, sex) %>% 
  summarize(mean_QRS = mean(QRS, na.rm = TRUE), 
            sd_QRS = sd(QRS, na.rm = TRUE)) %>% 
  ungroup()

QRS_bmi_sex
```



### More summary measures

Let’s look at some summary measures of the `QRS` variable by considering multiple statistical functions at once in the same `summarize()` code:

```{r}

QRS_summary <- arrhythmia_adults %>% 
  summarize(
    min = min(QRS, na.rm = TRUE),
    q1 = quantile(QRS, 0.25, na.rm = TRUE),
    median = quantile(QRS, 0.5, na.rm = TRUE),
    q3 = quantile(QRS, 0.75, na.rm = TRUE),
    max = max(QRS, na.rm = TRUE),
    mean = mean(QRS, na.rm = TRUE),
    sd = sd(QRS, na.rm = TRUE),
    skewness = moments::skewness(QRS, na.rm = TRUE),
    kurtosis= moments::kurtosis(QRS, na.rm = TRUE),
    missing = sum(is.na(QRS)),
    n = n())

QRS_summary
```



The distribution of the data can be represented by an histogram.

```{r}
#| message: false
#| label: fig-hist_QRS
#| fig-cap: A Histogram of QRS of adult patients.

hist(arrhythmia_adults$QRS, main = "Histogram", xlab = "QRS (ms)", ylab = "Frequency")
```

As we can see the distribution of `QRS` variable is not symmetrical.


If we want the summary statistics for males and females separately we must use the `group_by()` function:

```{r}
QRS_summary2 <- arrhythmia_adults %>% 
  group_by(sex) %>% 
  summarize(
    min = min(QRS, na.rm = TRUE),
    q1 = quantile(QRS, 0.25, na.rm = TRUE),
    median = quantile(QRS, 0.5, na.rm = TRUE),
    q3 = quantile(QRS, 0.75, na.rm = TRUE),
    max = max(QRS, na.rm = TRUE),
    mean = mean(QRS, na.rm = TRUE),
    sd = sd(QRS, na.rm = TRUE),
    skewness = moments::skewness(QRS, na.rm = TRUE),
    kurtosis= moments::kurtosis(QRS, na.rm = TRUE),
    missing = sum(is.na(QRS)),
    n = n()
  ) %>% 
  ungroup()

QRS_summary2
```



```{r}
#| label: fig-hist_QRS_sex
#| fig-cap: Histogram of QRS of males and females patients.
#| fig-subcap: 
#|   - "Histogram of QRS of males."
#|   - "Histogram of QRS of females."
#| layout-ncol: 2

hist(arrhythmia_adults$QRS[arrhythmia_adults$sex=="male"],
     main = "Histogram (males)", xlab = "QRS (ms)", ylab = "Frequency")

hist(arrhythmia_adults$QRS[arrhythmia_adults$sex=="female"], 
     main = "Histogram (females)", xlab = "QRS (ms)", ylab = "Frequency")
```


Let's see the `age` variable:

```{r}
age_summary <- arrhythmia_adults %>% 
  summarize(
    min = min(age, na.rm = TRUE),
    q1 = quantile(age, 0.25, na.rm = TRUE),
    median = quantile(age, 0.5, na.rm = TRUE),
    q3 = quantile(age, 0.75, na.rm = TRUE),
    max = max(age, na.rm = TRUE),
    mean = mean(age, na.rm = TRUE),
    sd = sd(age, na.rm = TRUE),
    skewness = moments::skewness(age, na.rm = TRUE),
    kurtosis= moments::kurtosis(age, na.rm = TRUE),
    missing = sum(is.na(age)),
    n = n())

age_summary
```




```{r}
#| message: false
#| label: fig-hist_age
#| fig-cap: A Histogram of age of adult patients.

hist(arrhythmia_adults$age, main = "Histogram", xlab = "Age (years)", ylab = "Frequency")
```


The `age` variable approximates a **symmetrical distribution (bell-shaped)**.




## Summarizing Categorical variables

### Frequency distribution table

Summary measures for categorical data include **frequencies** and **percentages**.
If we have two categorical variables, we might be interested in a 2-dimensional frequency distribution table. Say we want to know the number of males and females in each of the four bmi catecories. We can create a frequency distribution table with `table()` function for the variables `bmi_cat` and `sex`:

```{r}
tb1 <- table(arrhythmia_adults$bmi_cat, arrhythmia_adults$sex)

tb1
```


We can also create a frequency distribution table using the functions `count()` from the `{dplyr}` package:

```{r}
tb2 <- arrhythmia_adults %>%
             count(bmi_cat, sex)

tb2
```


### Frequency distribution table with total percentages

We can also create a summary statistics using the functions `count()` and `mutate()` from the `{dplyr}` package to find the **total** percentages:

```{r}
tb3 <- arrhythmia_adults %>%
             count(bmi_cat, sex) %>%
             mutate(percentage = round(n*100/sum(n), digits = 2))

tb3
```

In the above table we can see the frequency for each category and the total percentage (the frequency is divided by the total number of observations, here 428). For example, the percentage of underweight males is 0.93\%, (4/428)\*100.



### Frequency distribution table with percentages inside for each bmi category

However, we may want to calculate the percentage inside for each category. For example, the percentage of males (n = 4) in the underweight category (n = 11) is 36.4\%, (4/11)\*100. We will use the functions `group_by()`, `summarize()` and `mutate()` from the `dplyr` package:


```{r}
#| message: false

tb4 <- arrhythmia_adults %>% 
  group_by(bmi_cat, sex) %>% 
  summarize(n=n()) %>% 
  mutate(percentage = round(n*100/sum(n), digits = 2)) %>% 
  ungroup()

tb4
```



