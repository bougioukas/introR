# Data structures in R: matrices and arrays {#sec-matrix}

```{r}
#| include: false

library(matlib)
```

When we have finished this chapter, we should be able to:

::: {.callout-caution icon="false"}
## Learning objectives

-   Create and manipulate matrices in R.

-   Conduct basic matrix algebra in R.

-   Create arrays in R.

:::

 

## Creating a matrix in R

Every data object in R contains a number of attributes to describe the nature of the information in that object. For example, we can generate objects such as matrices using the `dim` (dimension) attribute. Using matrices we can perform a matrix algebra operations, a powerful type of mathematical technique.

::: {.callout-tip icon="false"}
## Matrix

A matrix is an atomic vector with **two dimensions** and it is used to represent 2-dimensional data (they have rows and columns) of the **same type** (numeric, character, or logical).
:::

Adding a dimension attribute to a vector allows it to behave like a 2-dimensional matrix. For example:

```{r}
x_20 <- 1:20

dim(x_20) <- c(5, 4)

x_20
```

 

Most often we define a matrix using the `matrix()` function. We need to specify the number of rows and columns.

**Example 1: numeric matrix**

```{r}
X1 <- matrix(1:20, nrow=5, ncol=4)
X1

```

The matrix is filled by columns (default column-wise), so entries can be thought of starting in the "upper left" corner and running down the columns. If we want the matrix to be filled by rows we must add an extra argument (`byrow=TRUE`) in the `matrix()` function, as follows:

```{r}
X2 <- matrix(1:20, nrow=5, ncol=4, byrow=TRUE)
X2

```

 

The `type` of data, the `class` and the `dimensions` of the `X2` object are:

```{r}
typeof(X2)
class(X2)
dim(X2)
```

Of note, the `typeof()` function gives the type of data that the object includes (integer), while the `class` is the type of structure (matrix) of the object.

The `dim()` is an inbuilt R function that either sets or returns the dimension of the matrix, array, or data frame. The `dim()` function takes the R object as an argument and returns its dimension (as in our example), or if you assign the value to the `dim()` function, then it sets the dimension for that R Object.

 

**Example 2: logical matrix**

```{r}
x_logical <- c(TRUE, FALSE, FALSE, TRUE, FALSE, FALSE)
X3 <- matrix(x_logical, nrow=2, ncol=3)
X3
```

 

The `type` of data, the `class` and the `dimensions` of the `X3` object are:

```{r}
typeof(X3)
class(X3)
dim(X3)
```

 

**Example 3: character matrix**

```{r}
x_char <- c("a", "b", "c", "d", "e", "f")
X4 <- matrix(x_char, nrow=2, ncol=3)
X4
```

 

The `type` of data, the `class` and the `dimensions` of the `X4` object are:

```{r}
typeof(X4)
class(X4)
dim(X4)
```

## Using matrix subscripts

We can identify rows, columns, or elements of a matrix by using subscripts and brackets. Particularly, *X\[i, \]* refers to the *ith* row of matrix X, *X\[ , j\]* refers to *jth* column, and *X\[i, j\]* refers to the *ijth* element, respectively.

The subscripts *i* and *j* can be numeric vectors in order to select multiple rows or columns, as shown in the following examples.

```{r}
X <- matrix(1:10, nrow=2)  # create a 2x5 numeric matrix filled by column
X

X[2, ]   # select the 2nd row
X[, 2]  # select the 2nd column
X[1, 4]  # select the element in the 1st row, 4th column
X[1, c(4, 5)]  # select the elements in the 1st row, 4th and 5th column 
```

 

## Basic matrix algebra

### The identity matrix

A square matrix with ones on the main diagonal and zeros elsewhere:

```{r}
diag(5)
```

 

### The transpose of a matrix

The transpose operation simply changes columns to rows. For example, for a matrix `A`:

```{r}
A <-matrix(c(4, -1, -5, 0, 1, -2), 2, 3, byrow = TRUE)
A
```

the transpose matrix is:

```{r}
t(A)
```

 

### Multiplying a number (scalar) with a matrix

In scalar multiplication, each element in the matrix is multiplied by the given number (scalar). For example:

```{r}
A
-3 * A
```

 

### Element-wise multiplication of two matrices of the same dimensions

The element-wise multiplication of two matrices, **A** and **B**, of the same dimensions can also be computed with the `*` operator.

```{r}
A

B <-matrix(c(3, 1, -5, 0, 2, -2), 2, 3, byrow = TRUE)
B
```

The output will be a matrix of the same dimensions of the original matrices:

```{r}
A * B
```

 

### The dot product (inner product) of two matrices

To multiply a matrix by another matrix we need to do the "dot product" of rows and columns. But what does that mean? Let us see with an example.

To work out the answer for the 1st row and 1st column:

![Dot product for the 1st row and 1st column](images/dot1.png){#fig-dot1 width="65%"}

The "Dot Product" is where we multiply matching members, then sum up: 1×7 + 2×9 + 3×11 = 58

We match the 1st members (1 and 7), multiply them, likewise for the 2nd members (2 and 9) and the 3rd members (3 and 11), and finally sum them up.

Want to see another example? Here it is for the 1st row and 2nd column:

![Dot product for the 1st row and 2nd column](images/dot2.png){#fig-dot2 width="65%"}

The "Dot Product" is: 1×8 + 2×10 + 3×12 = 64

::: callout-note
## Example: Dot (inner) Product in R

In R, a dot (inner) product of two matrices can be performed with the `%*%` operator.

```{r}
P <- matrix(c(3, 0, -5, -1, -3, 4), nrow = 2, ncol = 3, byrow = TRUE)
Q <- matrix(c(-5, 5, 2, 1, -2, 0), nrow = 3, ncol = 2, byrow = TRUE)
P
Q

P %*% Q
```
:::

::: callout-important
Before inner multiplying two matrices check that the **dimensions** are compatible. The number of columns of the first matrix must be equal to the number of rows of the second.
:::

 

### Matrix crossproduct

If we need to calculate the inner product of a matrix and the transpose we can type `t(A) %*% B`, being A and B the names of the matrices.

```{r}
A
B
t(A) %*% B
```

However, in R it is more efficient and faster using the `crossprod`:

```{r}
crossprod(A, B)
```

 

### The determinant of a matrix

The determinant is a scalar value that is a function of the entries of a square matrix:

```{r}
M <- matrix( c(5, 1, 0, 3,-1, 2, 4, 0,-1), nrow = 3, byrow = TRUE)
M
det(M)
```

 

### The inverse of a matrix

The `det(M)` is not zero, so inverse exists:

```{r}
M_inv  <- inv(M)
M_inv
```

The inverse of a matrix `M` is defined as the `M_inv` matrix which multiplies M to give the identity matrix:

```{r}
M_inv %*% M
```

 

### Symmetric matrix

In linear algebra, a **symmetric** matrix is a square matrix that is equal to its transpose. For example:

```{r}
S <- matrix(c(13, -4, 2, -4, 11, -2, 2, -2, 8), 3, 3, byrow = TRUE)
S
t(S)
```

A symmetric matrix guarantees that its eigenvalues are real numbers. Eigenvalues and eigenvectors are highly used by the data scientists as they are the core of the data science field. For example, eigenvalues and eigenvectors are very much useful in the principal component analysis which is a dimensionality reduction technique in machine learning and is highly used in the field of data science.

The `eigen()` built-in function in R calculates the eigenvalues and eigenvectors of a symmetric matrix. It returns a named list, with eigenvalues named values and eigenvectors named vectors:

```{r}
ev <- eigen(S)
ev
```

The eigenvalues are always returned in decreasing order, and each column of vectors corresponds to the elements in values.

 

### Application: calculation of the average using matrices

In ordinary algebra, the mean of a set of `n` observations, $v_1, v_2, v_3,...,v_i, ..., v_n$ is computed by adding all of the observations and dividing by the number of observations:

$$
\overline{v} = \frac{1}{n}\sum_{i=1}^{n}v_i
$$

where $\overline{v}$ is the mean of observations, $\sum_{i=1}^{n}v_i$ is the sum of all observations, and $n$ is the number of observations.

In matrix algebra, given that:

$$
U = \left(\begin{array}{c} 
1 \\
1 \\
\vdots \\
1
\end{array}\right)
$$

and

$$
V = \left(\begin{array}{c} 
v_1 \\
v_2 \\
\vdots \\
v_n
\end{array}\right)
$$

the mean can be computed as follows:

$$
\frac{1}{n} \cdot U^T \cdot V =
\frac{1}{n} \cdot
\begin{pmatrix}
      1 & 1 & 1 & ...& 1
    \end{pmatrix}
    \cdot
    \begin{pmatrix}
      v_{1} \\
      v_{2} \\
      v_{3} \\
      \vdots \\
      v_{n} \\
    \end{pmatrix} =
$$

$$
=
    \frac{1}{n} \cdot
    \begin{pmatrix}
      1\cdot v_{1} + 1\cdot v_{2} +1\cdot v_{3} +...1\cdot v_{n} 
    \end{pmatrix} =
    \frac{1}{n}\sum_{i=1}^{n}v_i
$$

where $U^T$ is the transpose of $U$.

For example:

```{r}
my_values <- c(2, 5, 7, -4, 8, 6, 3)
mean(my_values)
```

```{r}
n <- length(my_values)  # get the length (number of elements) of vector
U <- matrix(1, n, 1)
U
V <- matrix(my_values, n, 1)
V
```

```{r}
average_my_values <- t(U) %*% V/n
average_my_values 
```

 

## Arrays

Arrays are similar to matrices but can have **more than two dimensions**. They're created with an `array()` function from base R:

```{r}
# build the 2x3x4 array
my_array <- array(1:24, dim = c(2,3,4))
my_array
```

As you can see, arrays are a natural extension of matrices. They can be useful in programming new statistical methods. Like matrices, they contain a single type of data (e.g., numeric).

We can find the `type`, `class` and the `dimensions` of the array:

```{r}
typeof(my_array)
class(my_array)
dim(my_array)
```
