# R packages {#sec-packages}

```{r}
#| include: false

library(kableExtra)

```


## What are R packages?


### Base R packages

R installs automatically a set of standard packages (base packages) during installation process. **Base packages** contain the basic functions that allow R to work, and enable standard statistical and graphical functions on data sets. 



### Add-on packages

More packages can be added later from repositories, when they are needed for some specific purpose (add-on R packages). **Add-on R packages** are written by a world-wide community of developers and R users and most of them can be installed for free from repositories.


A **repository** is a place where packages are located and stored so we can install them from it. 
Some of the most popular repositories for R packages are: 

* **CRAN:** Comprehensive R Archive Network(CRAN) is the official repository.

* **Github:** Github is the most popular repository for open source projects.

* **Bioconductor:** Bioconductor is a topic-specific repository, intended for open source software for bioinformatics.

 


::: callout-tip
## Add-on R packages

Add-on R packages **extend the functionality** of R by providing additional collection of functions, sample data, compiled code, some tests to check everything works as it should, and documentation for the package and the functions inside in a well-defined format. 
:::




To **use** an add-on package we need to:

1. ***Install the package from a repository***. Once we've installed a package, we likely won't install it again unless we want to update it to a newer version.

1. ***Load the package in R session***. Add-on packages are not loaded by default when we start RStudio on our computer. Each add-on package needs to be loaded explicitly **every time** we start RStudio.


For example, among the many add-on packages, we will use in this textbook are the `dplyr` package for data wrangling, the `ggplot2` package for data visualization and and the `rstatix` package for statistical tests.

Let's now show how to perform these two steps for the `ggplot2` package for data visualization.

 

## Package installation

There are two ways to install an add-on R package: an easy way and a more advanced way. 


**A. Installing Packages Using RStudio UI**

Let's install the `rstatix` package the easy way first as shown in Figure @fig-installation. In the Q4 - files, plots, packages, help pane of RStudio:

a) Click on the "Packages" tab.
a) Click on "Install".
a) Type the name of the package under "Packages (separate multiple with space or comma):" In this case, type `rstatix`.
a) Click "Install."  
     

![Installing packages in R the easy way](images/installation.png){#fig-installation width="80%"}



**B. Installing packages from repositories using command**

For installing the `rstatix` package from **CRAN** we type the following command in the console pane of RStudio and press **Enter** on our keyboard:


```{r}
#| eval: false

install.packages("rstatix")
```

Note we must include the **quotation marks** around the name of the package.


In order to install **several** package at once, we just have to write:

```{r}
#| eval: false

install.packages(c("rstatix", "dplyr", "ggplot2"))
```


**We only have to install a package once**. However, if we want to update a previously installed package to a newer version, we need to re-install it by repeating the earlier steps.


Moreover, suppose, for instance, that we want to download the **development** version of the `rstatix` package from GitHub.
The first step is to install and load the `devtools` package, available in CRAN. On Windows, in case we encounter some error means we also need to install the **Rtools**. Then we can call the `install_github()` function to install the R package from GitHub.


In case we need to install an **older** version of a package the simplest method is to use the provided `install_version()` function of the devtools package to install the version we need.





## Package loading

Recall that after we've installed a package, we need to **load it**. In other words, we need to "open it." We do this by using the **`library()`** command (note that the the quotation marks are not necessary when we are loading a package). For example, to load the `rstatix` package, run the following code in the console pane.

```{r}
#| eval: false

library(rstatix)
```

::: {.callout-important}
## Packages Vs Libraries

There is always confusion between a package and a library, and we find people calling libraries as packages.  The directories in R where the packages are stored are called the libraries.
:::


If after running the earlier code, a blinking cursor returns next to the `>` "prompt" sign in console, it means we were successful and the `rstatix` package is now loaded and ready to use. If however, we get a red "error message" that reads...

`r text_spec("Error in library(rstatix) : there is no package called ‘rstatix’", color = "red")`

... it means that we didn't successfully install it.    


 


There is one way in R that can use a `function` without using `library()`. To do this, we can simply use the notation `package::function` . 

For example:

```{r}
#| eval: false

rstatix::t_test()
```
The above notation tells R to use the `t_test` function from `rstatix` without load the `rstatix` package. 















