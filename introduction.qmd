# Introduction to R and Rstudio {#sec-introduction}

```{r}
#| include: false

library(tidyverse)
library(here)

library(fontawesome)

library(readr)
```

## Installing R and RStudio

First things first. We need to download and install both R and RStudio (an integrated development environment for R) on our personal computer. First, we install R, then we will need to install RStudio.

1.  First, we must [Download and install R](https://cran.r-project.org/):

-   If our operating system (OS) is Windows: we click on "Download R for Windows", then click on "base", then click on the Download link.

-   If our operating system (OS) is macOS: we click on "Download R for (Mac) OS X", then under "Latest release:" click on R-X.X.X.pkg, where R-X.X.X is the version number.

2.  Second, we must [Download and install RStudio](https://www.rstudio.com/products/rstudio/download/):

-   We scroll down near the bottom of the page.
-   We click on the download link corresponding to your computer's operating system.

We follow the usual installation procedures for R and RSudio.

## What are R and RStudio?

We will use R via RStudio. Beginners often confuse the two applications. Using an analogy, R is like an airplane's engine while RStudio is like an airplane's dashboard (@fig-engine_analogy).

Specifically, R is a statistical programming language (an implementation of the S programming language) and a powerful graphics engine, which was created by Ross Ihahka and Robert Gentleman at the University of Auckland in 1993.

The name R for the language was coined after the initials of the forenames of the inventors, plus the influence of the S language.

R does all the heavy work (like an airplane engine) while RStudio is an integrated development environment (IDE) that was founded by J.J. Allaire in 2009. RStudio provides a friendly interface by adding a plenty of great features, auto-complete functions and tools (like an airplane dashboard with electronic monitors, and navigation systems) and makes life a lot easier.

![Analogy of difference between R and RStudio](images/engine_analogy.png){#fig-engine_analogy width="80%"}

After we install R and RStudio on our computer, we'll have two new programs (also called applications) we can open. In this textbook, we'll always work in **RStudio**.

## Starting R & RStudio

After the RStudio installation is finished, click the RStudio icon ![](images/r_studio_icon.png){#fig-r_studio_icon width="5%"}

R starts automatically when we open RStudio [@fig-RStudio_panels] and we are greeted by **three panes**:

![RStudio Screenshot with Console on the left and Help tab in the bottom right.](images/RStudio_panels.png){#fig-RStudio_panels width="100%"}


The three main panes that divide the screen are:

1. the large **Console pane** on the left runs R code.

2. the workspace pane, which includes the Environment and History tabs, in the upper right.

    + The **Environment tab** keeps track of the objects we create as we work with R (a major part of our tasks involves creating objects). 

    + The **History tab** tracks all of the commands that we have sent to the R console in the session.


3. the Files/Plots/Packages/Help/Viewer pane in the lower right. 

   + The **Files tab** lets us create new folders (directories) on our computer, as well as copy, move, delete, or rename files.

    + The **Plots tab** holds graphs and charts we generate from our data and during the analysis. 

    + The **Packages** tab lists of all the R packages installed on our hard drive and indicates whether or not they are currently loaded. We’ll discuss packages in more detail in the next sections.

    + The **Help tab**, provides links to search for help directly from our RStudio window. 

    + The **Viewer tab** in RStudio allows us to view local web content (e.g., to view an html table).

Throughout this textbook, we’ll come to learn what purpose each of these panes serve. 


::: {.callout-tip}
## Command prompt  \ >

The Console pane starts with information about the version number, license and contributors, and provides some guidance on how to get help. The last line is a **standard command prompt** (the greater than sign > symbol) that indicates R is ready and expecting instructions to do something.

:::

 

Let's type `14 + 16` at the R command prompt and press `Enter`:

```{r}
14 + 16
```

So what happened?

Well, R gave us a response (output) to our input (`14 + 16`). That response came after we pressed the Enter key. It was `[1] 30`. It’s clear that `30` is the answer to the `14 + 16`. However, what does the `[1]` mean? At this point we can pretty much ignore it, but technically it refers to the index of the first item on each line. (Sometimes R prints out many lines as an output. The number inside the brackets helps us figure out where in the sequence we are per line).


## R scripts

Usually, we do our programming by writing our code in script files. An R script (with the “.R” extension) is simply a text file in which our R code is stored, and then can be “sent” to the console, where R will execute it.


If we go to:

```{mermaid}
flowchart LR
  A[File] -.-> B(New File) -.-> C(R Script)
```

in the RStudio menu, we should see another pane (Q1) opened on the left above the interactive console [@fig-RStudio_4panels]. This is where we can write a length script with lots of lines of code, and save the file for future use.


![RStudio Screenshot with four panes.](images/RStudio_4panels.png){#fig-RStudio_4panels width="100%"}

Therefore, the RStudio window is divided into **four** panes (quadrants) that contain:

* Q1 - code editor (script)
* Q2 - console
* Q3 - environment (workspace), history
* Q4 - files, plots, packages, help, viewer (for local web content)


::: {.callout-tip}
## RStudio preferences

The four panes might be in a different order that those in @fig-RStudio_4panels. If we’d like, we can change the **order** of the windows under RStudio preferences. We select from RStudio menu:
```{mermaid}
flowchart LR
  A[Tools] -.-> B(Global Options) -.-> C(Pane layout)
```

We can also change their **shape** by either clicking the minimize or maximize buttons on the top right of each pane, or by clicking and dragging the middle of the borders of the windows.

:::



In Rscript, we can execute our code line by line by putting the cursor on the line or selecting a chunk of lines (by highlighting the text) and pressing the **run** button ![](images/run.png){#fig-run width="8%"} in the source window. 
We can also run our selected code using the **keywboard shortcut `Ctrl + Enter`**.

::: {.callout-tip}
## Advantages writing our R code as an R script file

+ We can save and reuse our code
+ We can document our work (however, we can only include one-line comments and
these must be prefixed with the hash symbol, \ #)
+ We can share our work with others
+ We can move beyond writing one line of code at a time

:::


