# R functions {#sec-functions}

```{r}
#| include: false

library(fontawesome)

```

In programming, we use functions to incorporate sets of commands that we want to use repeatedly or that, because of their complexity, are better self-contained in a sub program and called when needed.

We have already used some R functions searching for help (i.e., `help()`, `example()`, `apropos()`). Most of the computations in R involves using functions. The base version of R includes many other functions, and thousands of others can be added (by installing packages or by creating them from scratch).

> A function in R is defined by its **name** and by the list of its **arguments**: `function_name(arg1 = val1, arg2 = val2, ...)`

where `arg1, arg2,` ... are called the arguments of the function, whereas `value1` is the value given to the argument arg1, etc.


::: callout-tip
## Call a function

To **call** a function in R, we simply **type its name**, followed by open and closing parentheses. Anything we type inside the parentheses are the **function's arguments**.
:::

 

## Characteristics of R Functions

**A. Name and argumnets of a function**

> A function essentially has a **name** and a list of **arguments** separated by a comma.

Let's have look at an example:

```{r}
seq(from = 5, to = 8, by = 0.5)
```

The function name is `seq` and it has three explicitly named arguments `from`, `to` and `by`. The arguments `from` and `to` are the start and end values of a sequence that we want to create, and `by` is the increment of the sequence.

The above result can also be obtained without naming the arguments as follows:

```{r}
seq(5, 8, 0.5)
```

::: callout-tip
## Name the arguments in the functions

We do not necessarily need to indicate the names of the arguments, but only the values, as long as we follow their order. However, it's a good idea to name at least some of the arguments in the functions. This practice minimizes errors assigning unnamed arguments to options and makes code more readable.
:::

 

**B. Positional matching of arguments**

And what about this?

```{r}
seq(5, 8)
```

This result demonstrates something about how R resolves function arguments.

> If we don't use argument names, R will match the arguments in the order that they appeared (positional matching).

Here, it is assumed that we want a sequence `from = 5` that goes `to = 8`. Since we didn't specify step size, the default value of `by` in the function definition is used, which ends up being `1` in this case.

Moreover, the `seq()` function has other arguments that we could use which are documented in the help page running `?seq`. For example, we could use the argument `length.out` (instead of `by`) to fix the length of the sequence as follows:

```{r}
seq(from = 5, to = 8, length.out = 16)
```

 

**C. Required and optional arguments**

> Some arguments in a function are **required** while others may be **optional**. We can use `args()` for displaying the argument names and corresponding default values of a function.

Let's see for example the `log()` function:

```{r}
args(log)
```

In the `log()` function `x` is a required argument while `base` is an optional argument and comes with a default value `exp(1)`.

If we don't supply a value for `base`, R will use the default value `exp(1)`:

```{r}
log(15)  # R uses the default value of `exp(1)`
```

Otherwise, R will use for `base` the value that we supply:

```{r}
log(15, base = 10)  # R uses our value 10
```

In contrast, `x` is a required argument because if we don't supply `x` argument the `log()` function will fail:

```{r, error=TRUE, eval= FALSE}
log(base=10)
```

`r kableExtra::text_spec("Error: argument x is missing, with no default", color = "red")`

::: callout-tip
## Required and optional arguments

For R functions, some arguments must be specified (they are required) and others are optional (because a default value is already given in the code of the function).
:::

 

::: callout-note
## Playing with the arguments in several different ways

To calculate the **natural logarithm of 3**, any of the following expressions can be used:

```{r}
#| eval: false

log(3)
log(x=3)
log(x=3, base=exp(1))
log(x=3, exp(1))
log(3, base=exp(1))
log(3, exp(1))

log(base=exp(1), 3)
log(base=exp(1), x=3)
```
:::

 

::: callout-important
## Caution

Note that calling

```{r}
#| eval: false

log(exp(1), 3)
```

calculates the logarithm of exp(1) in base 3.
:::


 

Not all functions have (or require) arguments.

For example:

```{r}
date()
```

 

**D. Functions "live" in packages**

> Functions "live" in Base R and in R packages!

![Functions live inside the R packages that can be downloaded from the internet](images/packages.png){#fig-packages width="80%"}

 



## Mathematical functions

R has many built in mathematical functions such as the `log(x)` that we have already seen.


### Logarithms and exponentials

![The natural logarithm function ln(x) is the inverse of the exponential function y = e\^x](images/log_exp.png){#fig-log_exp width="50%"}

::: {.callout-note icon="false"}
## Examples: Logarithms and exponentials

```{r}
log(100) # natural logarithm ln(x)

log10(100) # base-10 logarithm

exp(0.5) # exponential e^(1/2)

```
:::

 

### Trigonometric functions

Trigonometric functions define the relationship among the sides and angles of a right angle triangle (@fig-triangle). They also allow us to use angle measures, in radians or degrees, to find the coordinates of a point on a circle (e.g., unit circle)(@fig-trig_circle).

::: {#fig-elephants layout-ncol="2"}
![Right-Angled Triangle](images/triangle.png){#fig-triangle width="25%"}

![Trigonometric circle](images/trig_circle.png){#fig-trig_circle width="20%"}

Basic Trigonometry
:::

The main functions in trigonometry are sine, cosine and tangent.

$$ sin(\theta)=\frac{opposite}{hypotenuse} $$ {#eq-sin} $$ cos(\theta)=\frac{adjacent}{hypotenuse} $$ {#eq-cos} $$ tan(\theta)=\frac{opposite}{adjacent} $$ {#eq-tan}

 

::: {.callout-note icon="false"}
## Examples: Trigonometric functions in R (angles in radians)

```{r}
sin(pi/2) 

cos(pi)

tan(pi/3)
```
:::

 


### Other mathematical functions

::: {.callout-note icon="false"}
## Examples: Other mathematical functions

```{r}

sqrt(9)    # squared root

abs(-9)   # absolute value

factorial(3)   # factorial 3! = 1x2x3

```
:::

 

### The `round()` function

The **`round()`** function is often very useful. The round function follows the **rounding principle**. By default, we will get the nearest integer. For example:

```{r}
round(7 / 3)  # rounding 7/3 (2.333) to the nearest integer
```

If we want to control the approximation accuracy, we can add a digits argument to specify how many digits we want after the decimal point. For example:

```{r}
round(7 / 3, digits = 2)  # rounding 7/3 to two decimal places
```

 

::: callout-important
## Round rule when the dropped digit is 5

If the first digit that is dropped is exactly 5, R uses a rule that's common in programming languages: Always round to the nearest **even** number. For example:

```{r}
round(1.5)
round(2.5)

round(4.5)
round(5.5)
```
:::

 

## The sessionInfo() and option() functions

We can obtain information about R, the OS and attached or loaded packages running the following function:

```{r}
#| eval: false

sessionInfo()
```

 

Additionally, the `options()` function in R can be used to change various default behaviors. For example, the digits argument controls the number of digits to display in output. The current options are returned when `options()` is called, to allow them to be restored. The command `help(options)` lists all of the set table options.

```{r}
#| eval: false

help(options)
```

 

## User Defined Functions (UDF)

We can create our own functions, using the **`function()`**, which is a very powerful way to extend R. @fig-fun_syntax displays the syntax for creating an R function.

 

![The syntax of a function in R](images/fun_syntax.png){#fig-fun_syntax width="80%"}

 

::: callout-tip
## What do we need to create a function?

1.  the function's name
2.  the arguments of the function
3.  the code of the function (statements)
:::

For example a function that convert Celsius to Kelvin is:

```{r}
celsius_to_kelvin <- function(temp_C) {
  temp_K <- temp_C + 273.15
  return(temp_K)
}
# freezing point of water in Kelvin
celsius_to_kelvin(0)
```

We defined the function by "assigning" the `function(temp_C)` to the name `celsius_to_kelvin` using the assignment operator `<-` (see ).

So, in most cases, a function has a name (e.g., `celsius_to_kelvin`), some arguments used as input to the function, within the `()` following the keyword 'function' (e.g., `temp_C`); a body, which is the code within the curly braces `{}`, where we carry out the computation; and can have one or more return values (the output here is the `temp_K` which is a numeric value).

::: {.callout-caution collapse="true" icon="false"}
## `r fa("rocket", fill = "orange")` Function components

A function has three components:

1.  The `formals()`, the list of arguments that control how you call the function.

2.  The `body()`, the code inside the function.

3.  The `environment()`, the data structure that determines how the function finds the values associated with the names.

While the formals and body are specified **explicitly** when you create a function, the environment is specified implicitly, based on **where** we defined the function. The function environment always exists, but it is only printed when the function isn't defined in the R global environment. For example:

```{r}
formals(celsius_to_kelvin)         # the argument of the function

body(celsius_to_kelvin)            # the code of the function

environment(celsius_to_kelvin)     # the function's environment
```
:::
